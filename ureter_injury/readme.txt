This repository contains code to accompany the manuscript "Machine Learning Models Accurately Predict Ureteral Injury During Colorectal Surgery" and contains code to reproduce the work.

The colectomy and proctectomy procedure targeted datasets were downloaded from the participant use data file website (https://www.facs.org/quality-programs/acs-nsqip/participant-use). Microsoft Excel was used to convert TXT files to CSV files. Further data processing was then performed using the Pandas library in Python.

The ureter injury outcome was generated using CPT codes as described in the methods section of the manuscript. A BMI column was generated from height and weight. The ‘COL_APPROACH’ column was condensed, with SILS, endoscopic, NOTES, ‘other MIS’, and hybrid cases recoded as laparoscopic. Procedures were categorized based on CPT codes to L, R, and total colectomy and LAR, APR, and proctectomy with perineal approach. A race/ethnicity column was generated by combining the race and ethnicity columns. Missing categorical values were filled with the string ‘Unknown.’ Missing numerical values were filled with the median value of the column. The numerical columns were scaled using RobustScaler. The categorical columns were encoded using LabelEncoder from sklearn.

BayesSearchCV was used to identify the best hyperparameters for each model. RF and XGB combinations were tested for 100 iterations with 5-fold cross-validation on the test/validation data. NN combinations were tested for 50 iterations with 5-fold cross-validation. NN models consisted of a series of fully-connected layers, with Dense layers with “relu” activation, followed by Batch Normalization and Dropout. The Adam optimizer and binary crossentropy loss were used. Hyperparameter search showed that XGBoost with the following parameters (n_estimators=50, subsample=0.6, min_child_weight=10, max_depth=6, learning_rate=0.1, colsample_bytree=0.8) had the best performance. For the neural network, training was performed with early stopping with a patience of 25 epochs and a minimum change of 1x10-8. The Delong test was implemented using code from https://biasedml.com/roc-comparison/.

Once the combined csv is created from the proctectomy and colectomy datasets (code in other SSI/readm repositories), it can be pre-processed using 'preproc.ipynb'. 'table1.ipynb' from SSI/readm repositories can be used to generate summary statistics. Scripts in the hp_search folder can be used to find optimal hyperparameters for each model. Then these parameters can be inputted into 'keras.ipynb', 'model.ipynb', and 'lr.ipynb' and metrics calculated. These notebooks also produces TPR/FPR's and precision/recall's to be used in 'curves.ipynb'. Finally, 'shap.ipynb' from SSI/readm can be used to build a NN model and perform SHAP analysis.
